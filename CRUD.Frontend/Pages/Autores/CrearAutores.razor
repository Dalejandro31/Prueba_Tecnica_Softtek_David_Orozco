@page "/autores/crear"
@inject NavigationManager NavigationManager
@inject IAutorService AutorService

<h3 class="mb-4">Crear Autor</h3>

<EditForm Model="@nuevoAutor" OnValidSubmit="@CrearAutor" class="row g-3">
    <DataAnnotationsValidator />
    

    <div class="col-md-6">
        <label for="nombreCompleto" class="form-label">
            Nombre Completo <span class="text-danger">*</span>
        </label>
        <InputText @bind-Value="nuevoAutor.NombreCompleto" id="nombreCompleto" class="form-control" />
        <ValidationMessage For="@(() => nuevoAutor.NombreCompleto)" />
    </div>

    <div class="col-md-6">
        <label class="form-label">
            Fecha de Nacimiento <span class="text-danger">*</span>
        </label>
        <InputDate @bind-Value="nuevoAutor.FechaNacimiento" class="form-control" />
        <ValidationMessage For="@(() => nuevoAutor.FechaNacimiento)" />
    </div>

    <div class="col-md-6">
        <label for="ciudadProcedencia" class="form-label">
            Ciudad de Procedencia <span class="text-danger">*</span>
        </label>
        <InputText @bind-Value="nuevoAutor.CiudadProcedencia" id="ciudadProcedencia" class="form-control" />
        <ValidationMessage For="@(() => nuevoAutor.CiudadProcedencia)" />
    </div>

    <div class="col-md-6">
        <label for="correoElectronico" class="form-label">
            Correo Electrónico <span class="text-danger">*</span>
        </label>
        <InputText @bind-Value="nuevoAutor.CorreoElectronico" id="correoElectronico" class="form-control" />
        <ValidationMessage For="@(() => nuevoAutor.CorreoElectronico)" />
    </div>

    <div class="col-12">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="@Regresar">Cancelar</button>
    </div>
</EditForm>



@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger mt-3">@mensajeError</div>
}
@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success mt-3">@mensajeExito</div>
}
@code {
    private Autor nuevoAutor = new Autor();
    private string mensajeError;
    private string mensajeExito;


    private async Task CrearAutor()
    {
        try
        {
            mensajeError = "";
            mensajeExito = "";
            await AutorService.CrearAutorAsync(nuevoAutor);
            mensajeExito = "Autor Creado correctamente";
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/autores");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/autores");
    }
}

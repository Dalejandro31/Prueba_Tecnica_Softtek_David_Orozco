@page "/libros/editar/{LibroId:int}"
@inject NavigationManager NavigationManager
@inject ILibroService LibroService
@using CRUD.Frontend.DTOs


<h3 class="mb-4">Editar Libro</h3>

@if (libro == null)
{
    <div class="alert alert-info">Cargando...</div>
}
else
{
    <EditForm Model="@libro" OnValidSubmit="@ModificarLibro" class="row g-3">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-md-6">
            <label class="form-label">Título</label>
            <InputText @bind-Value="libro.Titulo" class="form-control" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Año de Publicación</label>
            <InputDate @bind-Value="libro.AnioDeAnioPublicacion" class="form-control" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Género</label>
            <InputText @bind-Value="libro.Genero" class="form-control" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Número de Páginas</label>
            <InputNumber @bind-Value="libro.NumeroPaginas" class="form-control" />
        </div>

        <div class="col-12">
            <label class="form-label">Nombre del Autor</label>
            <InputText @bind-Value="libro.NombreAutor" class="form-control" />
        </div>

        <div class="col-12">
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
            <button type="button" class="btn btn-secondary" @onclick="Regresar">Cancelar</button>
        </div>
    </EditForm>
}

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger mt-3">@mensajeError</div>
}
@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success mt-3">@mensajeExito</div>
}
@code {
    [Parameter]
    public int LibroId { get; set; }

    private LibroCrearDto libro = new LibroCrearDto();
    private string mensajeError;
    private string mensajeExito;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var libroObtenido = await LibroService.ObtenerLibroPorIdAsync(LibroId);
            libro = new LibroCrearDto
                {
                    Titulo = libroObtenido.Titulo,
                    AnioDeAnioPublicacion = libroObtenido.AnioDeAnioPublicacion,
                    Genero = libroObtenido.Genero,
                    NumeroPaginas = libroObtenido.NumeroPaginas,
                    NombreAutor = libroObtenido.Autor?.NombreCompleto
                };
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private async Task ModificarLibro()
    {
        try
        {
            mensajeError = "";
            mensajeExito = "";

            await LibroService.ModificarLibroAsync(LibroId, libro);
            mensajeExito = "Libro editado correctamente";
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/libros");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/libros");
    }
}
